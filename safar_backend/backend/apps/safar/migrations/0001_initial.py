# Generated by Django 5.1.7 on 2025-04-22 15:15

import apps.safar.models
import django.contrib.gis.db.models.fields
import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('geographic_data', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(db_index=True, default=False)),
                ('name', models.CharField(db_index=True, max_length=255, unique=True, verbose_name='Category Name')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
            ],
            options={
                'verbose_name': 'Category',
                'verbose_name_plural': 'Categories',
            },
        ),
        migrations.CreateModel(
            name='SmsLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('to_number', models.CharField(max_length=20)),
                ('message', models.TextField()),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('success', 'Success'), ('failed', 'Failed')], max_length=20)),
                ('provider', models.CharField(default='twilio', max_length=20)),
                ('provider_message_id', models.CharField(blank=True, max_length=100, null=True)),
                ('error_message', models.CharField(blank=True, max_length=255, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'SMS Log',
                'verbose_name_plural': 'SMS Logs',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Box',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(db_index=True, default=False)),
                ('name', models.CharField(db_index=True, max_length=255, verbose_name='Box Name')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('total_price', models.DecimalField(blank=True, db_index=True, decimal_places=2, max_digits=10, null=True, verbose_name='Total Price')),
                ('currency', models.CharField(default='USD', max_length=10, verbose_name='Currency')),
                ('duration_days', models.PositiveIntegerField(default=1, verbose_name='Duration in Days')),
                ('duration_hours', models.PositiveIntegerField(default=0, verbose_name='Duration in Hours')),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('start_date', models.DateField(blank=True, null=True, verbose_name='Start Date')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='End Date')),
                ('is_customizable', models.BooleanField(default=False, verbose_name='Is Customizable')),
                ('max_group_size', models.PositiveIntegerField(default=10, verbose_name='Maximum Group Size')),
                ('tags', models.JSONField(blank=True, default=list)),
                ('city', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='geographic_data.city', verbose_name='City')),
                ('country', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='geographic_data.country', verbose_name='Country')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='box', to='safar.category', verbose_name='Category')),
            ],
            options={
                'verbose_name': 'Box',
                'verbose_name_plural': 'Boxes',
            },
        ),
        migrations.CreateModel(
            name='BoxItineraryDay',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(db_index=True, default=False)),
                ('day_number', models.PositiveIntegerField(verbose_name='Day Number')),
                ('date', models.DateField(blank=True, null=True, verbose_name='Specific Date')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Day Description')),
                ('estimated_hours', models.FloatField(default=8, verbose_name='Estimated Hours')),
                ('box', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='itinerary_days', to='safar.box', verbose_name='Box')),
            ],
            options={
                'verbose_name': 'Box Itinerary Day',
                'verbose_name_plural': 'Box Itinerary Days',
                'ordering': ['day_number'],
                'unique_together': {('box', 'day_number')},
            },
        ),
        migrations.CreateModel(
            name='Experience',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(db_index=True, default=False)),
                ('title', models.CharField(db_index=True, max_length=255, verbose_name='Title')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('location', django.contrib.gis.db.models.fields.PointField(geography=True, srid=4326, verbose_name='Geolocation')),
                ('price_per_person', models.DecimalField(db_index=True, decimal_places=2, max_digits=10, verbose_name='Price Per Person')),
                ('currency', models.CharField(default='USD', max_length=10, verbose_name='Currency')),
                ('duration', models.PositiveIntegerField(verbose_name='Duration (minutes)')),
                ('capacity', models.PositiveIntegerField(verbose_name='Capacity')),
                ('schedule', models.JSONField(blank=True, default=list, null=True, verbose_name='Schedule')),
                ('rating', models.FloatField(db_index=True, default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(5.0)], verbose_name='Rating')),
                ('is_available', models.BooleanField(db_index=True, default=True, verbose_name='Is Available')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='experience', to='safar.category', verbose_name='Category')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owned_experiences', to=settings.AUTH_USER_MODEL, verbose_name='Owner')),
            ],
            options={
                'verbose_name': 'Experience',
                'verbose_name_plural': 'Experiences',
            },
        ),
        migrations.CreateModel(
            name='Flight',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(db_index=True, default=False)),
                ('airline', models.CharField(db_index=True, max_length=255, verbose_name='Airline')),
                ('flight_number', models.CharField(db_index=True, max_length=50, unique=True, verbose_name='Flight Number')),
                ('departure_airport', models.CharField(db_index=True, max_length=3, verbose_name='Departure Airport')),
                ('arrival_airport', models.CharField(db_index=True, max_length=3, verbose_name='Arrival Airport')),
                ('airline_url', models.URLField(blank=True, null=True, verbose_name='Airline URL')),
                ('arrival_city', models.CharField(db_index=True, max_length=255, verbose_name='Arrival City')),
                ('departure_time', models.DateTimeField(db_index=True, verbose_name='Departure Time')),
                ('arrival_time', models.DateTimeField(db_index=True, verbose_name='Arrival Time')),
                ('price', models.DecimalField(db_index=True, decimal_places=2, max_digits=10, verbose_name='Price')),
                ('currency', models.CharField(default='USD', max_length=10, verbose_name='Currency')),
                ('duration', models.PositiveIntegerField(verbose_name='Duration (minutes)')),
                ('baggage_policy', models.JSONField(default=dict, verbose_name='Baggage Policy')),
            ],
            options={
                'verbose_name': 'Flight',
                'verbose_name_plural': 'Flights',
                'indexes': [models.Index(fields=['departure_airport', 'arrival_airport'], name='safar_fligh_departu_6cc776_idx'), models.Index(fields=['departure_time', 'arrival_time'], name='safar_fligh_departu_29cc62_idx')],
            },
        ),
        migrations.CreateModel(
            name='Booking',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(db_index=True, default=False)),
                ('check_in', models.DateField(blank=True, db_index=True, null=True, verbose_name='Check-In Date')),
                ('check_out', models.DateField(blank=True, db_index=True, null=True, verbose_name='Check-Out Date')),
                ('booking_date', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Booking Date')),
                ('group_size', models.PositiveIntegerField(default=1)),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('Confirmed', 'Confirmed'), ('Cancelled', 'Cancelled')], db_index=True, default='Pending', max_length=20, verbose_name='Status')),
                ('total_price', models.DecimalField(db_index=True, decimal_places=2, max_digits=10, verbose_name='Total Price')),
                ('currency', models.CharField(default='USD', max_length=10, verbose_name='Currency')),
                ('payment_status', models.CharField(db_index=True, default='Pending', max_length=20, verbose_name='Payment Status')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to=settings.AUTH_USER_MODEL, verbose_name='User')),
                ('box', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='bookings', to='safar.box', verbose_name='Box')),
                ('experience', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='bookings', to='safar.experience', verbose_name='Experience')),
                ('flight', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='bookings', to='safar.flight', verbose_name='Flight')),
            ],
            options={
                'verbose_name': 'Booking',
                'verbose_name_plural': 'Bookings',
            },
        ),
        migrations.CreateModel(
            name='Media',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(db_index=True, default=False)),
                ('url', models.URLField(blank=True, null=True, verbose_name='Media URL')),
                ('file', models.FileField(blank=True, null=True, upload_to=apps.safar.models.upload_file, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'jpeg', 'png', 'gif', 'webp', 'bmp', 'mp4', 'mov', 'avi', 'mkv', 'webm', 'flv'])])),
                ('type', models.CharField(choices=[('photo', 'Photo'), ('video', 'Video')], default='photo', max_length=10, verbose_name='Media Type')),
                ('uploaded_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='uploaded_media', to=settings.AUTH_USER_MODEL, verbose_name='Uploaded By')),
            ],
            options={
                'verbose_name': 'Media',
                'verbose_name_plural': 'Media',
            },
        ),
        migrations.AddField(
            model_name='experience',
            name='media',
            field=models.ManyToManyField(blank=True, related_name='experiences', to='safar.media', verbose_name='Media'),
        ),
        migrations.AddField(
            model_name='box',
            name='media',
            field=models.ManyToManyField(blank=True, related_name='boxes', to='safar.media', verbose_name='Media'),
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(db_index=True, default=False)),
                ('message_text', models.TextField(verbose_name='Message Text')),
                ('is_read', models.BooleanField(db_index=True, default=False, verbose_name='Is Read')),
                ('booking', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='messages', to='safar.booking', verbose_name='Booking')),
                ('receiver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_messages', to=settings.AUTH_USER_MODEL, verbose_name='Receiver')),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_messages', to=settings.AUTH_USER_MODEL, verbose_name='Sender')),
            ],
            options={
                'verbose_name': 'Message',
                'verbose_name_plural': 'Messages',
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(db_index=True, default=False)),
                ('type', models.CharField(choices=[('Booking Update', 'Booking Update'), ('Payment', 'Payment'), ('New Box', 'New Box'), ('Personalized Box', 'Personalized Box'), ('Discount', 'Discount'), ('Points', 'Points Deducted'), ('Message', 'Message'), ('General', 'General')], db_index=True, default='General', max_length=50, verbose_name='Type')),
                ('message', models.TextField(verbose_name='Message')),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('sent', 'Sent'), ('failed', 'Failed'), ('delivered', 'Delivered')], db_index=True, default='pending', max_length=20)),
                ('channels', models.JSONField(blank=True, default=list, help_text='List of channels used to send this notification', null=True)),
                ('processing_started', models.DateTimeField(blank=True, null=True)),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('is_read', models.BooleanField(db_index=True, default=False, verbose_name='Is Read')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Notification',
                'verbose_name_plural': 'Notifications',
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(db_index=True, default=False)),
                ('amount', models.DecimalField(db_index=True, decimal_places=2, max_digits=10, verbose_name='Amount')),
                ('currency', models.CharField(default='USD', max_length=10, verbose_name='Currency')),
                ('payment_method', models.CharField(max_length=50, verbose_name='Payment Method')),
                ('payment_status', models.CharField(db_index=True, default='Pending', max_length=20, verbose_name='Payment Status')),
                ('transaction_id', models.CharField(db_index=True, max_length=255, unique=True, verbose_name='Transaction ID')),
                ('booking', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='safar.booking', verbose_name='Booking')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Payment',
                'verbose_name_plural': 'Payments',
            },
        ),
        migrations.CreateModel(
            name='Place',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(db_index=True, default=False)),
                ('name', models.CharField(db_index=True, max_length=255, verbose_name='Place Name')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('location', django.contrib.gis.db.models.fields.PointField(geography=True, srid=4326, verbose_name='Geolocation')),
                ('rating', models.FloatField(db_index=True, default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(5.0)], verbose_name='Rating')),
                ('is_available', models.BooleanField(db_index=True, default=True, verbose_name='Is Available')),
                ('price', models.DecimalField(db_index=True, decimal_places=2, default=0.0, max_digits=10, verbose_name='Price')),
                ('currency', models.CharField(default='USD', max_length=10, verbose_name='Currency')),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='places', to='safar.category', verbose_name='Category')),
                ('city', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='geographic_data.city', verbose_name='City')),
                ('country', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='geographic_data.country', verbose_name='Country')),
                ('media', models.ManyToManyField(blank=True, related_name='places', to='safar.media', verbose_name='Media')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owned_places', to=settings.AUTH_USER_MODEL, verbose_name='Owner')),
                ('region', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='geographic_data.region', verbose_name='Region')),
            ],
            options={
                'verbose_name': 'Place',
                'verbose_name_plural': 'Places',
            },
        ),
        migrations.AddField(
            model_name='experience',
            name='place',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='experiences', to='safar.place', verbose_name='Place'),
        ),
        migrations.CreateModel(
            name='Discount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=20, unique=True)),
                ('discount_type', models.CharField(choices=[('Percentage', 'Percentage'), ('Fixed', 'Fixed')], max_length=20)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('valid_from', models.DateTimeField()),
                ('valid_to', models.DateTimeField()),
                ('is_active', models.BooleanField(default=True)),
                ('min_purchase_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('max_discount_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('max_uses', models.PositiveIntegerField(blank=True, null=True)),
                ('uses_count', models.PositiveIntegerField(default=0)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('applicable_boxes', models.ManyToManyField(blank=True, related_name='discounts', to='safar.box')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_discounts', to=settings.AUTH_USER_MODEL)),
                ('target_users', models.ManyToManyField(blank=True, related_name='targeted_discounts', to=settings.AUTH_USER_MODEL)),
                ('applicable_experiences', models.ManyToManyField(blank=True, related_name='discounts', to='safar.experience')),
                ('applicable_flights', models.ManyToManyField(blank=True, related_name='discounts', to='safar.flight')),
                ('applicable_places', models.ManyToManyField(blank=True, related_name='discounts', to='safar.place')),
            ],
        ),
        migrations.CreateModel(
            name='BoxItineraryItem',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(db_index=True, default=False)),
                ('start_time', models.TimeField(verbose_name='Start Time')),
                ('end_time', models.TimeField(verbose_name='End Time')),
                ('duration_minutes', models.PositiveIntegerField(verbose_name='Duration in Minutes')),
                ('order', models.PositiveIntegerField(verbose_name='Order in Day')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('is_optional', models.BooleanField(default=False, verbose_name='Is Optional')),
                ('estimated_cost', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Estimated Cost')),
                ('itinerary_day', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='safar.boxitineraryday', verbose_name='Itinerary Day')),
                ('experience', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='safar.experience', verbose_name='Experience')),
                ('place', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='safar.place', verbose_name='Place')),
            ],
            options={
                'verbose_name': 'Box Itinerary Item',
                'verbose_name_plural': 'Box Itinerary Items',
                'ordering': ['order'],
            },
        ),
        migrations.AddField(
            model_name='booking',
            name='place',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='bookings', to='safar.place', verbose_name='Place'),
        ),
        migrations.CreateModel(
            name='PushNotificationLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('message', models.TextField()),
                ('data', models.TextField(blank=True, null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('success', 'Success'), ('failed', 'Failed')], max_length=20)),
                ('provider', models.CharField(default='firebase', max_length=20)),
                ('provider_message_id', models.CharField(blank=True, max_length=100, null=True)),
                ('error_message', models.CharField(blank=True, max_length=255, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Push Notification Log',
                'verbose_name_plural': 'Push Notification Logs',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(db_index=True, default=False)),
                ('rating', models.PositiveIntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5')], db_index=True, verbose_name='Rating')),
                ('review_text', models.TextField(verbose_name='Review Text')),
                ('experience', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviews', to='safar.experience', verbose_name='Experience')),
                ('flight', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviews', to='safar.flight', verbose_name='Flight')),
                ('place', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviews', to='safar.place', verbose_name='Place')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Review',
                'verbose_name_plural': 'Reviews',
            },
        ),
        migrations.CreateModel(
            name='Wishlist',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(db_index=True, default=False)),
                ('box', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='wishlists', to='safar.box', verbose_name='Box')),
                ('experience', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='wishlists', to='safar.experience', verbose_name='Experience')),
                ('flight', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='wishlists', to='safar.flight', verbose_name='Flight')),
                ('place', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='wishlists', to='safar.place', verbose_name='Place')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='wishlists', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Wishlist',
                'verbose_name_plural': 'Wishlists',
            },
        ),
        migrations.AddIndex(
            model_name='media',
            index=models.Index(fields=['url', 'file'], name='safar_media_url_becf3d_idx'),
        ),
        migrations.AddIndex(
            model_name='media',
            index=models.Index(fields=['type'], name='safar_media_type_d61df9_idx'),
        ),
        migrations.AddIndex(
            model_name='message',
            index=models.Index(fields=['sender', 'receiver'], name='safar_messa_sender__df802c_idx'),
        ),
        migrations.AddIndex(
            model_name='place',
            index=models.Index(fields=['name', 'rating'], name='safar_place_name_236a24_idx'),
        ),
        migrations.AddIndex(
            model_name='place',
            index=models.Index(fields=['location'], name='safar_place_locatio_334fb5_idx'),
        ),
        migrations.AddIndex(
            model_name='experience',
            index=models.Index(fields=['title', 'rating'], name='safar_exper_title_d4ead6_idx'),
        ),
        migrations.AddIndex(
            model_name='experience',
            index=models.Index(fields=['location'], name='safar_exper_locatio_18f2ac_idx'),
        ),
        migrations.AddIndex(
            model_name='booking',
            index=models.Index(fields=['user', 'status'], name='safar_booki_user_id_ddd264_idx'),
        ),
        migrations.AddIndex(
            model_name='booking',
            index=models.Index(fields=['check_in', 'check_out'], name='safar_booki_check_i_1bb828_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['user', 'rating'], name='safar_revie_user_id_18c42b_idx'),
        ),
    ]
