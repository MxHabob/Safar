# Generated by Django 5.1.7 on 2025-04-22 15:15

import apps.authentication.models
import django.contrib.gis.db.models.fields
import django.core.validators
import django.db.models.deletion
import phonenumber_field.modelfields
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('contenttypes', '0002_remove_content_type_name'),
        ('geographic_data', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='InteractionType',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(db_index=True, default=False)),
                ('code', models.CharField(max_length=50, unique=True)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('points_value', models.PositiveIntegerField(default=0)),
                ('daily_limit', models.PositiveIntegerField(default=0, help_text='Maximum times per day this can earn points (0 = unlimited)')),
                ('is_active', models.BooleanField(default=True)),
                ('category', models.CharField(default='general', max_length=50)),
            ],
            options={
                'verbose_name': 'interaction type',
                'verbose_name_plural': 'interaction types',
                'ordering': ['category', 'name'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(db_index=True, default=False)),
                ('email', models.EmailField(max_length=255, unique=True, validators=[django.core.validators.EmailValidator()], verbose_name='Email Address')),
                ('username', models.CharField(blank=True, max_length=30, verbose_name='Username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='First Name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='Last Name')),
                ('language', models.CharField(default='en', max_length=10)),
                ('timezone', models.CharField(default='UTC', max_length=50)),
                ('preferred_language', models.CharField(default='en', max_length=10, verbose_name='Preferred Language')),
                ('preferred_currency', models.CharField(default='USD', max_length=10, verbose_name='Preferred Currency')),
                ('is_online', models.BooleanField(default=False, verbose_name='Online Status')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('is_staff', models.BooleanField(default=False, verbose_name='Staff Status')),
                ('is_2fa_enabled', models.BooleanField(default=False, verbose_name='Two-Factor Authentication Enabled')),
                ('last_login_device', models.CharField(blank=True, max_length=255, null=True, verbose_name='Last Login Device')),
                ('last_login_ip', models.GenericIPAddressField(blank=True, null=True, verbose_name='Last Login IP Address')),
                ('last_activity', models.DateTimeField(blank=True, null=True, verbose_name='Last Activity')),
                ('role', models.CharField(choices=[('guest', 'Guest'), ('owner', 'Owner'), ('organization', 'Real Estate Organization'), ('developer', 'Developer'), ('admin', 'Administrator')], default='guest', max_length=25, verbose_name='User Role')),
                ('is_profile_public', models.BooleanField(default=False)),
                ('points', models.PositiveIntegerField(default=0)),
                ('membership_level', models.CharField(choices=[('bronze', 'Bronze'), ('silver', 'Silver'), ('gold', 'Gold'), ('platinum', 'Platinum')], default='bronze', max_length=20, verbose_name='Membership Level')),
                ('following', models.ManyToManyField(blank=True, related_name='followers', to=settings.AUTH_USER_MODEL)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
        ),
        migrations.CreateModel(
            name='UserInteraction',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(db_index=True, default=False)),
                ('object_id', models.PositiveIntegerField(db_index=True)),
                ('interaction_type', models.CharField(choices=[('view_place', 'Viewed Place'), ('view_experience', 'Viewed Experience'), ('view_flight', 'Viewed Flight'), ('wishlist_add', 'Added to Wishlist'), ('wishlist_remove', 'Removed from Wishlist'), ('share', 'Shared Item'), ('photo_view', 'Viewed Photos'), ('map_view', 'Viewed Map'), ('search', 'Performed Search'), ('filter', 'Applied Filters'), ('details_expand', 'Expanded Details'), ('availability_check', 'Checked Availability'), ('booking_start', 'Started Booking'), ('booking_abandon', 'Abandoned Booking'), ('booking_complete', 'Completed Booking'), ('rating_given', 'Rated Item'), ('review_added', 'Added Review'), ('recommendation_show', 'Saw Recommendation'), ('recommendation_click', 'Clicked Recommendation')], db_index=True, max_length=50)),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional context about the interaction (e.g., search query, filters)')),
                ('device_type', models.CharField(blank=True, choices=[('mobile', 'Mobile'), ('desktop', 'Desktop'), ('tablet', 'Tablet')], max_length=20, null=True)),
                ('content_type', models.ForeignKey(limit_choices_to={'app_label__in': ['places', 'geographic_data']}, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='interactions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Interaction',
                'verbose_name_plural': 'User Interactions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PointsTransaction',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(db_index=True, default=False)),
                ('action', models.CharField(db_index=True, max_length=50)),
                ('points', models.IntegerField()),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('balance_after', models.PositiveIntegerField(default=0)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='points_transactions', to=settings.AUTH_USER_MODEL)),
                ('interaction', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='points_transactions', to='authentication.userinteraction')),
            ],
            options={
                'verbose_name': 'points transaction',
                'verbose_name_plural': 'points transactions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserLoginLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(db_index=True, default=False)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('device_type', models.CharField(blank=True, max_length=50)),
                ('login_status', models.CharField(default='success', max_length=20)),
                ('session_id', models.CharField(blank=True, max_length=100, null=True)),
                ('country', models.CharField(blank=True, max_length=100)),
                ('city', models.CharField(blank=True, max_length=100)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='login_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Login Log',
                'verbose_name_plural': 'User Login Logs',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(db_index=True, default=False)),
                ('avatar', models.ImageField(blank=True, null=True, upload_to=apps.authentication.models.upload_avatar)),
                ('bio', models.TextField(blank=True)),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region=None, verbose_name='Phone Number')),
                ('location', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, null=True, srid=4326, verbose_name='Geolocation')),
                ('postal_code', models.CharField(blank=True, max_length=20, verbose_name='Postal Code')),
                ('address', models.CharField(blank=True, max_length=255, verbose_name='Address')),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('gender', models.CharField(blank=True, choices=[('male', 'Male'), ('female', 'Female'), ('prefer_not_to_say', 'Prefer Not to Say'), ('other', 'Other')], default='prefer_not_to_say', max_length=20, verbose_name='Gender')),
                ('travel_history', models.JSONField(blank=True, default=list)),
                ('travel_interests', models.JSONField(blank=True, default=list)),
                ('language_proficiency', models.JSONField(blank=True, default=dict)),
                ('privacy_consent', models.BooleanField(default=False, verbose_name='Privacy Consent')),
                ('consent_date', models.DateTimeField(blank=True, null=True, verbose_name='Consent Date')),
                ('notification_push_token', models.CharField(blank=True, max_length=255, null=True)),
                ('wants_push_notifications', models.BooleanField(default=True)),
                ('wants_sms_notifications', models.BooleanField(default=False)),
                ('city', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='geographic_data.city')),
                ('country', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='geographic_data.country')),
                ('preferred_countries', models.ManyToManyField(blank=True, related_name='preferred_by_users', to='geographic_data.country')),
                ('region', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='geographic_data.region')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Profile',
                'verbose_name_plural': 'User Profiles',
            },
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['email'], name='authenticat_email_d74434_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['is_active'], name='authenticat_is_acti_099f68_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['role'], name='authenticat_role_7fb088_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['membership_level'], name='authenticat_members_7fba8a_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['created_at'], name='authenticat_created_b28532_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['last_login_ip'], name='authenticat_last_lo_8653d1_idx'),
        ),
        migrations.AddConstraint(
            model_name='user',
            constraint=models.UniqueConstraint(condition=models.Q(('is_deleted', False)), fields=('email',), name='unique_active_email'),
        ),
        migrations.AddConstraint(
            model_name='user',
            constraint=models.CheckConstraint(condition=models.Q(('email__contains', '@')), name='valid_email_format'),
        ),
        migrations.AddIndex(
            model_name='userinteraction',
            index=models.Index(fields=['user', 'interaction_type'], name='authenticat_user_id_91b5d2_idx'),
        ),
        migrations.AddIndex(
            model_name='userinteraction',
            index=models.Index(fields=['content_type', 'object_id'], name='authenticat_content_aa4fee_idx'),
        ),
        migrations.AddIndex(
            model_name='userinteraction',
            index=models.Index(fields=['created_at', 'interaction_type'], name='authenticat_created_173e77_idx'),
        ),
        migrations.AddIndex(
            model_name='userinteraction',
            index=models.Index(fields=['user'], name='authenticat_user_id_efc731_idx'),
        ),
        migrations.AddConstraint(
            model_name='userinteraction',
            constraint=models.UniqueConstraint(fields=('user', 'content_type', 'object_id', 'interaction_type'), name='unique_user_interaction'),
        ),
        migrations.AddIndex(
            model_name='pointstransaction',
            index=models.Index(fields=['user', 'created_at'], name='authenticat_user_id_b75767_idx'),
        ),
        migrations.AddIndex(
            model_name='pointstransaction',
            index=models.Index(fields=['action'], name='authenticat_action_024b60_idx'),
        ),
        migrations.AddIndex(
            model_name='pointstransaction',
            index=models.Index(fields=['points'], name='authenticat_points_85f149_idx'),
        ),
        migrations.AddIndex(
            model_name='userloginlog',
            index=models.Index(fields=['user', 'created_at'], name='authenticat_user_id_9b8d1f_idx'),
        ),
        migrations.AddIndex(
            model_name='userloginlog',
            index=models.Index(fields=['ip_address'], name='authenticat_ip_addr_af8388_idx'),
        ),
        migrations.AddIndex(
            model_name='userloginlog',
            index=models.Index(fields=['login_status'], name='authenticat_login_s_47c1cc_idx'),
        ),
        migrations.AddIndex(
            model_name='userprofile',
            index=models.Index(fields=['user'], name='authenticat_user_id_35f8a3_idx'),
        ),
        migrations.AddIndex(
            model_name='userprofile',
            index=models.Index(fields=['phone_number'], name='authenticat_phone_n_9f34a0_idx'),
        ),
        migrations.AddIndex(
            model_name='userprofile',
            index=models.Index(fields=['country', 'region', 'city'], name='authenticat_country_77fdc4_idx'),
        ),
    ]
